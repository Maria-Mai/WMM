prod(theta * exp(-theta*y))
}
likelihood(1)
likelihood(2)
likelihood(0.5)
likelihood(10)
likelihood(100)
?prod
theta.seq <- seq(0,10,0,01)
likelihood.vec <- Vectorize(likelihood, vectorize.args = "theta")
likelihood.vec<(theta.seq)
theta.seq <- seq(0,10,0.01)
likelihood.vec <- Vectorize(likelihood, vectorize.args = "theta")
likelihood.vec<(theta.seq)
likelihood.vec(theta.seq)
loglikelihood <- function(theta) {
sum(log(theta) - theta*y)
}
loglikelihood.vec <- Vectorize(loglikelihood, vectorize.args = "theta")
loglikelihood.vec(theta.seq)
theta.seq <- seq(0,0.1,0.001)
loglikelihood.vec(theta.seq)
theta.seq <- seq(0,0.1,0.0001)
loglikelihood.vec(theta.seq)
plot(theta.seq,loglikelihood, vec(theta.seq), type = "l")
theta.seq <- seq(0,0.1,0.0001)
plot(theta.seq,loglikelihood.vec(theta.seq), type = "l")
plot(theta.seq,score.vec(theta.seq),type = "l")
score <- function(theta) {
sum(1/theta-y)
}
score.vec <- Vectorize(score, vectorize.args = "theta")
plot(theta.seq,score.vec(theta.seq),type = "l")
plot(theta.seq,score.vec(theta.seq),type = "l",ylim = c(0,1000))
abline(h = 0)
plot(theta.seq,score.vec(theta.seq),type = "l",ylim = c(-100,1000))
abline(h = 0)
n <- length(y)
theta.hat <- n /sum(y)
abline(v=theta.hat,col=3,lty = 2)
hist(y)
hist(y,freq = F)
z <- seq(0,300,0.1)
points(z,dexp(z,theta.hat), type = "l", col = 2)
plot(ecdf(y))
points(z, pexp(z,theta.hat), type = "l", col = 2)
hist(y, breaks = seq(0,300,25))
aten
rlogo <- load(file = "C:/Users/Judith/Documents/Studium/1. Master/WMM/colour.rda")
plot.array(rlogo)
## Einlesen der Daten
bild <- load(file = "C:/Users/Judith/Documents/Studium/1. Master/WMM/colour.rda")
plot.array(bild$rlogo)
plot.array(bild[2])
plot.array(rlogo)
## Einlesen der Daten
bild <- load(file = "C:/Users/Judith/Documents/Studium/1. Master/WMM/colour.rda")
plot.array(rlogo)
head(rlogo)
rlogo
plot.array(bild[2])
bild[2]
plot.array(rlogo)
folge = seq(0,1,length.out = 49)
emptyArray = array(0, dim=c(49,49,3))
intWerte = seq(0,1,length.out = 49)
## a) Graustufenbild
for (j in 1:length(emptyArray[2])) {
for (i in 1:length(emptyArray[1])) {
for (k in 1:length(emptyArray[3])) {
emptyArray[i,j,1] = 0.299 * intWerte[j]
emptyArray[i,j,2] = 0.587 * intWerte[j]
emptyArray[i,j,3] = 0.114 * intWerte[j]
}
}
}
plot.array(emptyArray)
emptyArray
## a) Graustufenbild
for (j in 1:length(emptyArray[2])) {
for (i in 1:length(emptyArray[1])) {
for (k in 1:length(emptyArray[3])) {
#emptyArray[i,j,1] = 0.299 * intWerte[j]
#emptyArray[i,j,2] = 0.587 * intWerte[j]
#emptyArray[i,j,3] = 0.114 * intWerte[j]
emptyArray[i,j,1] = 0.5
emptyArray[i,j,2] = 0.5
emptyArray[i,j,3] = 0.5
}
}
}
plot.array(emptyArray)
length(emptyArray[1,,])
length(emptyArray[1])
length(emptyArray[[1])
length(emptyArray[[1]])
length(emptyArray[3])
length(emptyArray[,,3])
length(emptyArray[,3,])
dims(emptyArray)
dims(emptyArray)[1]
dim(emptyArray)[1]
## a) Graustufenbild
for (j in 1:dim(emptyArray[2])) {
for (i in 1:dim(emptyArray[1])) {
for (k in 1:dim(emptyArray[3])) {
#emptyArray[i,j,1] = 0.299 * intWerte[j]
#emptyArray[i,j,2] = 0.587 * intWerte[j]
#emptyArray[i,j,3] = 0.114 * intWerte[j]
emptyArray[i,j,1] = 0.5
emptyArray[i,j,2] = 0.5
emptyArray[i,j,3] = 0.5
}
}
}
## a) Graustufenbild
for (j in 1:dim(emptyArray)[2]) {
for (i in 1:dim(emptyArray)[1]) {
for (k in 1:dim(emptyArray)[3]) {
#emptyArray[i,j,1] = 0.299 * intWerte[j]
#emptyArray[i,j,2] = 0.587 * intWerte[j]
#emptyArray[i,j,3] = 0.114 * intWerte[j]
emptyArray[i,j,1] = 0.5
emptyArray[i,j,2] = 0.5
emptyArray[i,j,3] = 0.5
}
}
}
plot.array(emptyArray)
## a) Graustufenbild
for (j in 1:dim(emptyArray)[2]) {
for (i in 1:dim(emptyArray)[1]) {
for (k in 1:dim(emptyArray)[3]) {
emptyArray[i,j,1] = 0.299 * intWerte[j]
emptyArray[i,j,2] = 0.587 * intWerte[j]
emptyArray[i,j,3] = 0.114 * intWerte[j]
#emptyArray[i,j,1] = 0.5
#emptyArray[i,j,2] = 0.5
#emptyArray[i,j,3] = 0.5
}
}
}
plot.array(emptyArray)
emptyArray[49,1,1]
emptyArray[49,1,2]
emptyArray[49,1,3]
emptyArray[1,1,3]
emptyArray[1,49,3]
emptyArray[1,49,2]
emptyArray[1,49,3]
emptyArray[1,49,1]
blauArray = array(0, dim=c(49,49,3))
for (i in 1:dim(emptyArray)[1]) {
for (j in 1:dim(emptyArray)[2]) {
blauArray[i,j,3] = 0.114 * intWerte[i]
}
}
plot.array(blauArray)
blauArray = array(0, dim=c(49,49,3))
for (i in 1:dim(emptyArray)[1]) {
for (j in 1:dim(emptyArray)[2]) {
blauArray[i,j,3] = intWerte[i]
}
}
plot.array(blauArray)
grauArray = array(0, dim=c(49,49,3))
for (j in 1:dim(emptyArray)[2]) {
for (i in 1:dim(emptyArray)[1]) {
grauArray[i,j,1] = 0.299 * intWerte[j]
grauArray[i,j,2] = 0.587 * intWerte[j]
grauArray[i,j,3] = 0.114 * intWerte[j]
#Nicht grau sondern grün??
}
}
plot.array(grauArray)
bgArray = array(0, dim=c(49,49,3))
for (i in 1:dim(emptyArray)[1]) {
for (j in 1:dim(emptyArray)[2]) {
bgArray[i,j,2] = intWerte[j]
bgrray[i,j,3] = intWerte[i]
#Nicht grau sondern grün??
}
}
plot.array(bgArray)
for (j in 1:dim(emptyArray)[2]) {
for (i in 1:dim(emptyArray)[1]) {
emptyArray[i,j,1] = intWerte[j]
emptyArray[i,j,2] = intWerte[j]
emptyArray[i,j,3] = intWerte[j]
#Nicht grau sondern grün??
}
}
plot.array(emptyArray)
bgArray = array(0, dim=c(49,49,3))
for (i in 1:dim(emptyArray)[1]) {
for (j in 1:dim(emptyArray)[2]) {
bgArray[i,j,2] = intWerte[j]
bgArray[i,j,3] = intWerte[i]
#Nicht grau sondern grün??
}
}
plot.array(bgArray)
for (j in 1:dim(emptyArray)[2]) {
for (i in 1:dim(emptyArray)[1]) {
emptyArray[i,j,1] = 1
emptyArray[i,j,2] = 1
emptyArray[i,j,3] = 1
#Nicht grau sondern grün??
}
}
plot.array(emptyArray)
for (j in 1:dim(emptyArray)[2]) {
for (i in 1:dim(emptyArray)[1]) {
emptyArray[i,j,1] = 1
emptyArray[i,j,2] = 1
emptyArray[i,j,3] = 0
#Nicht grau sondern grün??
}
}
plot.array(emptyArray)
for (j in 1:dim(emptyArray)[2]) {
for (i in 1:dim(emptyArray)[1]) {
emptyArray[i,j,1] = 0
emptyArray[i,j,2] = 0
emptyArray[i,j,3] = 0
#Nicht grau sondern grün??
}
}
plot.array(emptyArray)
emptyArray[i,j,1] = 1
for (j in 1:dim(emptyArray)[2]) {
for (i in 1:dim(emptyArray)[1]) {
emptyArray[i,j,1] = 1
emptyArray[i,j,2] = 0
emptyArray[i,j,3] = 0
#Nicht grau sondern grün??
}
}
plot.array(emptyArray)
for (j in 1:dim(emptyArray)[2]) {
for (i in 1:dim(emptyArray)[1]) {
emptyArray[i,j,1] = 0
emptyArray[i,j,2] = 1
emptyArray[i,j,3] = 0
#Nicht grau sondern grün??
}
}
plot.array(emptyArray)
for (j in 1:dim(emptyArray)[2]) {
for (i in 1:dim(emptyArray)[1]) {
emptyArray[i,j,1] = 0
emptyArray[i,j,2] = 1.5
emptyArray[i,j,3] = 0
#Nicht grau sondern grün??
}
}
plot.array(emptyArray)
rotArray = array(0, dim=c(49,49,3))
for (i in 1:dim(emptyArray)[1]) {
for (j in 1:dim(emptyArray)[2]) {
if (i + j < 1 ) {
rotArray[i,j,1] = 1 - i -j
rotArray[i,j,2] = intWerte[j]
rotArray[i,j,3] = intWerte[i]
}
}
}
plot.array(rotArray)
rotArray = array(0, dim=c(49,49,3))
for (i in 1:dim(emptyArray)[1]) {
for (j in 1:dim(emptyArray)[2]) {
if ((i + j) < 1 ) {
rotArray[i,j,1] = 1 - i -j
rotArray[i,j,2] = intWerte[j]
rotArray[i,j,3] = intWerte[i]
}
}
}
plot.array(rotArray)
rotArray = array(0, dim=c(49,49,3))
for (i in 1:dim(emptyArray)[1]) {
for (j in 1:dim(emptyArray)[2]) {
if ((intWerte[i] + intWerte[j]) < 1 ) {
rotArray[i,j,1] = 1 - i -j
rotArray[i,j,2] = intWerte[j]
rotArray[i,j,3] = intWerte[i]
}
}
}
plot.array(rotArray)
plot.array(bgArray)
rotArray = array(0, dim=c(49,49,3))
for (i in 1:dim(emptyArray)[1]) {
for (j in 1:dim(emptyArray)[2]) {
if ((intWerte[i] + intWerte[j]) < 1 ) {
rotArray[i,j,1] = 1 - i
rotArray[i,j,2] = intWerte[j]
rotArray[i,j,3] = intWerte[i]
}
}
}
plot.array(rotArray)
rotArray = array(0, dim=c(49,49,3))
for (i in 1:dim(emptyArray)[1]) {
for (j in 1:dim(emptyArray)[2]) {
if ((intWerte[i] + intWerte[j]) < 1 ) {
rotArray[i,j,1] = 1
rotArray[i,j,2] = intWerte[j]
rotArray[i,j,3] = intWerte[i]
}
}
}
plot.array(rotArray)
rotArray = array(0, dim=c(49,49,3))
for (i in 1:dim(emptyArray)[1]) {
for (j in 1:dim(emptyArray)[2]) {
if ((intWerte[i] + intWerte[j]) < 1 ) {
rotArray[i,j,1] = 1 - intWerte[i] - intWerte[j]
rotArray[i,j,2] = intWerte[j]
rotArray[i,j,3] = intWerte[i]
}
}
}
plot.array(rotArray)
? load
?get
daten = load(file = "C:/Users/Judith/Documents/Studium/1. Master/WMM/dframe.rda", verbose = T)
dafra = load(file = "C:/Users/Judith/Documents/Studium/1. Master/WMM/dframe.rda", verbose = T)
daten = load(file = "C:/Users/Judith/Documents/Studium/1. Master/WMM/dframe.rda", verbose = T)
view(dafra)
View(dafra)
print(daten)
summary(daten)
dafra = load(file = "C:/Users/Judith/Documents/Studium/1. Master/WMM/dframe.rda", verbose = T)
summary(daten)
load(file = "C:/Users/Judith/Documents/Studium/1. Master/WMM/dframe.rda", verbose = T)
daten = dafra
x = dafra
## b) Funktionen ausprobieren
print(x)
str(x)
class(x)
dim(x)
length(x)
colnames(x)
rownames(x)
## c) Boxplot
boxplot(x)
## d) Reduzierter Plot
redX = x[:100,]
## d) Reduzierter Plot
redX = x[1:100,]
str(redX)
plot(redX)
## e) Oster Hase Plot
osterhase = x[c(2,4),]
plot(osterhase)
## e) Oster Hase Plot
osterhase = x[,c(2,4)]
plot(osterhase)
## e) Oster Hase Plot
osterhase = x[,c(4,2)]
plot(osterhase)
rotArray = array(0, dim=c(49,49,3))
for (i in 1:dim(emptyArray)[1]) {
for (j in 1:dim(emptyArray)[2]) {
if ((intWerte[i] + intWerte[j]) <= 1 ) {
rotArray[i,j,1] = 1 - intWerte[i] - intWerte[j]
rotArray[i,j,2] = intWerte[j]
rotArray[i,j,3] = intWerte[i]
}
}
}
plot.array(rotArray)
?lot.array
?plot.array
get(x = "daten")
assign(daten, xdaten)
assign(xdaten, daten)
load(file = "C:/Users/Judith/Documents/Studium/1. Master/WMM/colour.rda")
load(file = "C:/Users/Judith/Documents/Studium/1. Master/WMM/dframe.rda", verbose = T)
assign(load(file = "C:/Users/Judith/Documents/Studium/1. Master/WMM/dframe.rda", verbose = T),xdaten)
assign(load(file = "C:/Users/Judith/Documents/Studium/1. Master/WMM/dframe.rda", verbose = T),x)
assign(x,get(dafra))
assign(x,get(load(file = "C:/Users/Judith/Documents/Studium/1. Master/WMM/dframe.rda", verbose = T)))
?get
bild = load(file = "C:/Users/Judith/Documents/Studium/1. Master/WMM/dframe.rda", verbose = T)
assign(x,get(bild))
bgArray = array(0, dim=c(49,49,3))
for (i in 1:dim(emptyArray)[1]) {
for (j in 1:dim(emptyArray)[2]) {
bgArray[i,j,2] = intWerte[j]
bgArray[i,j,3] = intWerte[i]
}
}
plot.array(bgArray)
rotArray = array(0, dim=c(49,49,3))
for (i in 1:dim(emptyArray)[1]) {
for (j in 1:dim(emptyArray)[2]) {
if ((intWerte[i] + intWerte[j]) <= 1 ) {
rotArray[i,j,1] = 1 - intWerte[i] - intWerte[j]
rotArray[i,j,2] = intWerte[j]
rotArray[i,j,3] = intWerte[i]
}
}
}
plot.array(rotArray)
multiArray = array(0, dim=c(49,49,3))
for (i in 1:dim(emptyArray)[1]) {
for (j in 1:dim(emptyArray)[2]) {
if ((intWerte[i] + intWerte[j]) <= 1 ) {
multiArray[i,j,1] = 1 - intWerte[i] - intWerte[j]
multiArray[i,j,2] = intWerte[j]
multiArray[i,j,3] = intWerte[i]
r = max(multiArray[i,j,1],multiArray[i,j,2],multiArray[i,j,3])
multiArray[i,j,1]/r
multiArray[i,j,2]/r
multiArray[i,j,3]/r
}
}
}
plot.array(multiArray)
1/0.5
0.8/0.5
multiArray = array(0, dim=c(49,49,3))
for (i in 1:dim(emptyArray)[1]) {
for (j in 1:dim(emptyArray)[2]) {
if ((intWerte[i] + intWerte[j]) <= 1 ) {
multiArray[i,j,1] = 1 - intWerte[i] - intWerte[j]
multiArray[i,j,2] = intWerte[j]
multiArray[i,j,3] = intWerte[i]
r = max(multiArray[i,j,1],multiArray[i,j,2],multiArray[i,j,3])
multiArray[i,j,1] =  multiArray[i,j,1]/r
multiArray[i,j,2] = multiArray[i,j,2]/r
multiArray[i,j,3] = multiArray[i,j,3]/r
}
}
}
plot.array(multiArray)
addArray = array(0, dim=c(49,49,3))
for (i in 1:dim(emptyArray)[1]) {
for (j in 1:dim(emptyArray)[2]) {
if ((intWerte[i] + intWerte[j]) <= 1 ) {
addArray[i,j,1] = 1 - intWerte[i] - intWerte[j]
addArray[i,j,2] = intWerte[j]
addArray[i,j,3] = intWerte[i]
r = 1 - max(addArray[i,j,1],addArray[i,j,2],addArray[i,j,3])
addArray[i,j,1] =  addArray[i,j,1] + r
addArray[i,j,2] = addArray[i,j,2] + r
addArray[i,j,3] = addArray[i,j,3] + r
}
}
}
plot.array(addArray)
?load
?get
## a) Einlesen der Daten
# Aufgabe noch nicht korrekt bearbeitet
load(file = "C:/Users/Judith/Documents/Studium/1. Master/WMM/dframe.rda", verbose = T)
## a) Einlesen der Daten
# Aufgabe noch nicht korrekt bearbeitet
z = load(file = "C:/Users/Judith/Documents/Studium/1. Master/WMM/dframe.rda", verbose = T)
x = get(dafra)
x = get("dafra")
z = get("dafra")
z = get(load(file = "C:/Users/Judith/Documents/Studium/1. Master/WMM/dframe.rda", verbose = T))
rm(z)
z = get(load(file = "C:/Users/Judith/Documents/Studium/1. Master/WMM/dframe.rda", verbose = T))
source('~/Studium/1. Master/WMM/Übung 2/claude.R', encoding = 'UTF-8')
## Einlesen der Daten
funktionen = load(file = "Übung 2/claude.rda")
wave = get(funktionen[1])
shannon = get(funktionen[2])
## als PDF zu beantworten -> was genau macht outer und sweep funktion
## b) Funktion plotten
curve(expr = wave, from = 1, to = 2, n = 501, col = "blue")
## c) Wave-Plot im Intervall [1,2]
# äquidistante Abtastzeitpunkte t1,...,tn
t.seq = seq(1,2,by = 1/50)
# zugehörige Abtastwerte
f.seq = wave(t.seq)
# Plotten der Abtastzeiten und -werte
plot(x = t.seq, y = f.seq, col = "blue", type = "h")
## d)
# Originaldaten zuweisen
f.seq.org = shannon(x = t.seq, times = t.seq, samples = f.seq)
# Plotten des Originalsignals
points(x = t.seq, y = f.seq.org, col = "red", pch = 16)
## e)
setwd("~/Studium/1. Master/WMM/Aufgaben/Aufgabenblatt2")
## Einlesen der Daten
funktionen = load(file = "Übung 2/claude.rda")
wave = get(funktionen[1])
shannon = get(funktionen[2])
## als PDF zu beantworten -> was genau macht outer und sweep funktion
## b) Funktion plotten
curve(expr = wave, from = 1, to = 2, n = 501, col = "blue")
## c) Wave-Plot im Intervall [1,2]
# äquidistante Abtastzeitpunkte t1,...,tn
t.seq = seq(1,2,by = 1/50)
# zugehörige Abtastwerte
f.seq = wave(t.seq)
# Plotten der Abtastzeiten und -werte
plot(x = t.seq, y = f.seq, col = "blue", type = "h")
## d)
# Originaldaten zuweisen
f.seq.org = shannon(x = t.seq, times = t.seq, samples = f.seq)
# Plotten des Originalsignals
points(x = t.seq, y = f.seq.org, col = "red", pch = 16)
## e)
?image
?rep
